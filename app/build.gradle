apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: "kotlin-allopen"
apply plugin: "org.jetbrains.kotlin.kapt"

android {
	def buildNumber = System.getenv("BITRISE_BUILD_NUMBER") ?: "1"

	compileSdkVersion 25
	buildToolsVersion "25.0.3"
	defaultConfig {
		applicationId "com.droidsonroids.squakers"
		minSdkVersion 21
		targetSdkVersion 25
		versionCode buildNumber.toInteger()
		versionName "0.0" + buildNumber
		testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
		vectorDrawables.useSupportLibrary = true
		buildConfigField 'String', 'HOCKEYAPP_KEY', System.getenv("HOCKEYAPP_KEY").toString() ?: "NONE"
	}
	signingConfigs {
		if (System.getenv("BITRISEIO_ANDROID_KEYSTORE_ALIAS") != null) {
			release {
				keyAlias System.getenv("BITRISEIO_ANDROID_KEYSTORE_ALIAS")
				keyPassword System.getenv("BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD")
				storeFile file(System.getenv("HOME") + "/keystores/my_keystore.jks")
				storePassword System.getenv("BITRISEIO_ANDROID_KEYSTORE_PASSWORD")
			}
		} else {
			def keystorePropertiesFile = rootProject.file("keystore.properties");
			def keystoreProperties = new Properties()
			keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
			release {
				storeFile file(keystoreProperties['storeFile'])
				storePassword keystoreProperties['storePassword']
				keyAlias keystoreProperties['keyAlias']
				keyPassword keystoreProperties['keyPassword']
			}
		}
	}
	buildTypes {
		release {
			minifyEnabled true
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
			signingConfig signingConfigs.release
			buildConfigField 'boolean', 'CRASH_REPORTING_ENABLED', 'true'
			buildConfigField 'boolean', 'UPDATE_MANAGER_ENABLED', 'true'
		}
		debug {
			minifyEnabled false
			buildConfigField 'boolean', 'CRASH_REPORTING_ENABLED', 'false'
			buildConfigField 'boolean', 'UPDATE_MANAGER_ENABLED', 'false'
		}
	}

	sourceSets {
		main.java.srcDirs += 'src/main/kotlin'
		test.java.srcDirs += 'src/test/kotlin'
	}
}

kapt {
	generateStubs = true
}

allOpen{
	annotation("com.droidsonroids.squakers.annotation.OpenForTests")
}

dependencies {
	compile fileTree(dir: 'libs', include: ['*.jar'])
	androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
		exclude group: 'com.android.support', module: 'support-annotations'
	})
	testCompile 'junit:junit:4.12'
	testCompile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
	testCompile("com.nhaarman:mockito-kotlin:1.4.0") {
		exclude group: "org.jetbrains.kotlin", module: "kotlin-reflect"
	}

	compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"

	compile "com.android.support:design:$support_version"
	compile "com.android.support:appcompat-v7:$support_version"
	compile "com.android.support:cardview-v7:$support_version"

	//Constraint-Layout
	compile 'com.android.support.constraint:constraint-layout:1.0.2'

	//Reporting
	compile 'ch.acra:acra:4.9.2'
	compile 'net.hockeyapp.android:HockeySDK:4.1.4'

	//Networking
	compile 'com.squareup.okhttp3:okhttp:3.7.0'

	//Dependency injection
	compile "com.google.dagger:dagger:2.10"
	kapt "com.google.dagger:dagger-compiler:2.10"
}

configurations.all {
	resolutionStrategy.force "com.android.support:support-annotations:25.1.1"
}

repositories {
	mavenCentral()
}
